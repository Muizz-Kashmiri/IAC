AWSTemplateFormatVersion: 2010-09-09
Parameters:
  TableName:
    Type: String
    Default: TodoListTable
    Description: >-
      (Required) The name of the new DynamoDB table you want to create and save
      to. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: '^[A-Za-z]+$'
    ConstraintDescription: Required parameter. Must be characters only. No numbers allowed.



Resources:
  helloRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: helloRolePolicy0
          PolicyDocument:
            Statement:
              - Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:ConditionCheckItem'
                Effect: Allow
                Resource:
                  - !Sub 
                    - >-
                      arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                    - tableName: !Ref TableName
                  - !Sub 
                    - >-
                      arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                    - tableName: !Ref TableName
      Tags:
        - Key: 'lambda:createdBy'
          Value: CFN
  
  
  helloCreateAPIPostPermissionProd:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref hello
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/hello
        - __ApiId__: !Ref ServerlessRestApi
          __Stage__: '*'

  helloCreateAPIGetPermissionProd:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref hello
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/hello
        - __ApiId__: !Ref ServerlessRestApi
          __Stage__: '*'

  ServerlessRestApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref ServerlessRestApi
      StageName: Stage

  helloOtherOperationsAPIPermissionProd:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref hello
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/*/hello/*
        - __ApiId__: !Ref ServerlessRestApi
          __Stage__: '*'
    
  ServerlessRestApiProdStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref ServerlessRestApiDeployment82862ea4b9
      RestApiId: !Ref ServerlessRestApi
      StageName: Prod
    
  DynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Ref TableName
      AttributeDefinitions:
        - AttributeName: itemId
          AttributeType: S
      KeySchema:
        - AttributeName: itemId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
    
  
    
  hello:
    Type: 'AWS::Lambda::Function'
    
    Properties:
      Code:
        S3Bucket: lamb-api-bucket
        S3Key: Archive.zip
      Handler: handler.hello
      Role: !GetAtt 
        - helloRole
        - Arn
      Runtime: nodejs16.x
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Tags:
        - Key: 'lambda:createdBy'
          Value: CFN


  ServerlessRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Body:
        info:
          version: '1.0'
          title: !Ref 'AWS::StackName'
        paths:
          '/hello/{itemId}':
            x-amazon-apigateway-any-method:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${hello.Arn}/invocations
              responses: {}
          /hello:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${hello.Arn}/invocations
              responses: {}
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${hello.Arn}/invocations
              responses: {}
        swagger: '2.0'